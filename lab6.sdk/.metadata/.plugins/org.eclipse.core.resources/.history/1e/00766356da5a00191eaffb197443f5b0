

#include "xparameters.h"
#include "xadcps.h"
#include "xstatus.h"
#include "stdio.h"
#include "xil_printf.h"



#define XADC_DEVICE_ID 		XPAR_XADCPS_0_DEVICE_ID



#define CH_6   6  + XADCPS_CH_AUX_MIN
#define CH_7   7  + XADCPS_CH_AUX_MIN
#define CH_14  14 + XADCPS_CH_AUX_MIN
#define CH_15  15 + XADCPS_CH_AUX_MIN



#define MS_100  100000

/**************************** Type Definitions ******************************/


/***************** Macros (Inline Functions) Definitions ********************/

#define printf xil_printf /* Small foot-print printf function */

/************************** Function Prototypes *****************************/

static int XAdcPolledPrintfExample(u16 XAdcDeviceId);
static int XAdcFractionToInt(float FloatNum);

/************************** Variable Definitions ****************************/

static XAdcPs XAdcInst;      /* XADC driver instance */


int main(void)
{

	int Status;

	/*
	 * Run the polled example, specify the Device ID that is
	 * generated in xparameters.h.
	 */
	Status = XAdcPolledPrintfExample(XADC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("adcps polled printf Example Failed\r\n");
		return XST_FAILURE;
	}
	xil_printf("Successfully ran adcps polled printf Example\r\n");
	return XST_SUCCESS;
}


int XAdcPolledPrintfExample(u16 XAdcDeviceId)
{
	int Status;
	XAdcPs_Config *ConfigPtr;

	unsigned int rawData;

	XAdcPs *XAdcInstPtr = &XAdcInst;

	printf("\r\nEntering the XAdc Polled Example. \r\n");

	/*
	 * Initialize the XAdc driver.
	 */
	ConfigPtr = XAdcPs_LookupConfig(XAdcDeviceId);
	if (ConfigPtr == NULL) {
		return XST_FAILURE;
	}
	XAdcPs_CfgInitialize(XAdcInstPtr, ConfigPtr, ConfigPtr->BaseAddress);

	/*
	 * Self Test the XADC/ADC device
	 */
	Status = XAdcPs_SelfTest(XAdcInstPtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	XAdcPs_SetSequencerMode(XAdcInstPtr, XADCPS_SEQ_MODE_CONTINPASS);


	u32 counter = 0;

	while(1){
		printf("counter  %4lu\r\n",(unsigned int)(counter++));

		rawData = XAdcPs_GetAdcData(XAdcInstPtr, CH_6);
		printf("CH6 \t %4u\r\n",(unsigned int)(rawData));

		rawData = XAdcPs_GetAdcData(XAdcInstPtr, CH_7);
		printf("CH7 \t %4u\r\n",(unsigned int)(rawData));

		rawData = XAdcPs_GetAdcData(XAdcInstPtr, CH_14);
		printf("CH14 \t %4u\r\n",(unsigned int)(rawData));

		rawData = XAdcPs_GetAdcData(XAdcInstPtr, CH_15);
		printf("CH15 \t %4u\r\n",(unsigned int)(rawData));

		rawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_TEMP);
		printf("Temp \t %4d\r\n",(unsigned int)(XAdcPs_RawToTemperature(rawData)));
		usleep(MS_100);
	}


	printf("Exiting the XAdc Polled Example. \r\n");

	return XST_SUCCESS;
}


//	TempRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_TEMP);
//	TempData = XAdcPs_RawToTemperature(TempRawData);
//	printf("\r\nThe Current Temperature is %0d.%03d Centigrades.\r\n",
//				(int)(TempData), XAdcFractionToInt(TempData));
//
//
//	TempRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr, XADCPS_MAX_TEMP);
//	MaxData = XAdcPs_RawToTemperature(TempRawData);
//	printf("The Maximum Temperature is %0d.%03d Centigrades. \r\n",
//				(int)(MaxData), XAdcFractionToInt(MaxData));
//
//	TempRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr, XADCPS_MIN_TEMP);
//	MinData = XAdcPs_RawToTemperature(TempRawData & 0xFFF0);
//	printf("The Minimum Temperature is %0d.%03d Centigrades. \r\n",
//				(int)(MinData), XAdcFractionToInt(MinData));
//
//	/*
//	 * Read the VccPint Votage Data (Current/Maximum/Minimum) from the
//	 * ADC data registers.
//	 */
//	VccPintRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_VCCPINT);
//	VccPintData = XAdcPs_RawToVoltage(VccPintRawData);
//	printf("\r\nThe Current VCCPINT is %0d.%03d Volts. \r\n",
//			(int)(VccPintData), XAdcFractionToInt(VccPintData));
//
//	VccPintRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
//							XADCPS_MAX_VCCPINT);
//	MaxData = XAdcPs_RawToVoltage(VccPintRawData);
//	printf("The Maximum VCCPINT is %0d.%03d Volts. \r\n",
//			(int)(MaxData), XAdcFractionToInt(MaxData));
//
//	VccPintRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
//							XADCPS_MIN_VCCPINT);
//	MinData = XAdcPs_RawToVoltage(VccPintRawData);
//	printf("The Minimum VCCPINT is %0d.%03d Volts. \r\n",
//			(int)(MinData), XAdcFractionToInt(MinData));
//
//	/*
//	 * Read the VccPaux Votage Data (Current/Maximum/Minimum) from the
//	 * ADC data registers.
//	 */
//	VccPauxRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_VCCPAUX);
//	VccPauxData = XAdcPs_RawToVoltage(VccPauxRawData);
//	printf("\r\nThe Current VCCPAUX is %0d.%03d Volts. \r\n",
//			(int)(VccPauxData), XAdcFractionToInt(VccPauxData));
//
//	VccPauxRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
//								XADCPS_MAX_VCCPAUX);
//	MaxData = XAdcPs_RawToVoltage(VccPauxRawData);
//	printf("The Maximum VCCPAUX is %0d.%03d Volts. \r\n",
//				(int)(MaxData), XAdcFractionToInt(MaxData));
//
//
//	VccPauxRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
//								XADCPS_MIN_VCCPAUX);
//	MinData = XAdcPs_RawToVoltage(VccPauxRawData);
//	printf("The Minimum VCCPAUX is %0d.%03d Volts. \r\n\r\n",
//				(int)(MinData), XAdcFractionToInt(MinData));
//
//
//	/*
//	 * Read the VccPdro Votage Data (Current/Maximum/Minimum) from the
//	 * ADC data registers.
//	 */
//	VccPdroRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_VCCPDRO);
//	VccPintData = XAdcPs_RawToVoltage(VccPdroRawData);
//	printf("\r\nThe Current VCCPDDRO is %0d.%03d Volts. \r\n",
//			(int)(VccPintData), XAdcFractionToInt(VccPintData));
//
//	VccPdroRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
//							XADCPS_MAX_VCCPDRO);
//	MaxData = XAdcPs_RawToVoltage(VccPdroRawData);
//	printf("The Maximum VCCPDDRO is %0d.%03d Volts. \r\n",
//			(int)(MaxData), XAdcFractionToInt(MaxData));
//
//	VccPdroRawData = XAdcPs_GetMinMaxMeasurement(XAdcInstPtr,
//							XADCPS_MIN_VCCPDRO);
//	MinData = XAdcPs_RawToVoltage(VccPdroRawData);
//	printf("The Minimum VCCPDDRO is %0d.%03d Volts. \r\n",
//			(int)(MinData), XAdcFractionToInt(MinData));


/****************************************************************************/
/**
*
* This function converts the fraction part of the given floating point number
* (after the decimal point)to an integer.
*
* @param	FloatNum is the floating point number.
*
* @return	Integer number to a precision of 3 digits.
*
* @note
* This function is used in the printing of floating point data to a STDIO device
* using the xil_printf function. The xil_printf is a very small foot-print
* printf function and does not support the printing of floating point numbers.
*
*****************************************************************************/
int XAdcFractionToInt(float FloatNum)
{
	float Temp;

	Temp = FloatNum;
	if (FloatNum < 0) {
		Temp = -(FloatNum);
	}

	return( ((int)((Temp -(float)((int)Temp)) * (1000.0f))));
}
